// Protobuf messages used for storing TM search results on disk.
//
// This is meant to replace the existing ad-hoc text format used by IO.py.
//
// It provides the main advantage of being extensible, adding a new field
// for new stats is trivial and backwards/forwards compatible. It also
// has the potential to be more efficient for data storage ...

syntax = "proto3";

package busy_beaver;


// A "potentially" big positive integer.
message BigInt {
  oneof big_int {
    // If the int is small enough, it is stored as a uint64.
    uint64 int = 1;
    // If it is too big (>= 2^64), serialize it as a text string.
    string hex_str = 3;
    // DEPRECTATED base 10 version: string str = 2;
  }
}

message TuringMachine {
  oneof ttable {
    // High density, bit-packed version of ttable.
    // Each transition is represented by one byte from least significant to most:
    //   * 3 bits for (symbol + 1)  [symbol == -1 means undefined cell]
    //   * 3 bits for (state + 1)   [state == -1 means halt]
    //   * 1 bit for dir
    //   * 1 bit for is_newrow  [indicates where to add row breaks to matrix]
    bytes ttable_packed = 1;
    // Lower density, std text format.
    // Allows up to 25 states.
    string ttable_str = 3;
  }

  // Enumeration options
  bool allow_no_halt = 2;
}


enum InfReason {
  INF_UNSPECIFIED = 0;
  INF_MACRO_STEP = 1;
  INF_CHAIN_STEP = 2;
  INF_PROOF_SYSTEM = 3;
  INF_REVERSE_ENGINEER = 4;
  INF_LIN_RECUR = 5;
  INF_CTL = 6;
  INF_BACKTRACK = 7;
  INF_CLOSED_GRAPH = 8;
}

// Statuses for various searches (BB, BBB, ...)
message HaltStatus {
  // Have we made a halting decision?
  bool is_decided = 1;
  // Does this machine halt? (Only meaningful if is_decided = True)
  bool is_halting = 2;

  // Only meaningful if is_halting = True.
  BigInt halt_steps = 3;
  BigInt halt_score = 4;

  // Which transition led to halt (important for enumerating in TNF).
  uint64 from_state = 6;
  uint64 from_symbol = 7;

  // Only meaningful if is_halting = False.
  InfReason inf_reason = 5;

  // next id: 8
}

message QuasihaltStatus {
  // Have we made a quasihalting decision?
  bool is_decided = 1;
  // Does this machine quasihalt? (Only meaningful if is_decided = True)
  bool is_quasihalting = 2;

  BigInt quasihalt_steps = 3;
  uint64 quasihalt_state = 4;
}

message BBStatus {
  HaltStatus halt_status = 1;
  QuasihaltStatus quasihalt_status = 2;
  // TODO: Add more, like lin_recur_status and blanking_status?
}


message SimulatorParams {
  // Macro machine configuration.
  uint64 block_size = 9;
  bool has_blocksymbol_macro = 10;

  // Maximum number of simulator "loops" to run for.
  uint64 max_loops = 1;
  // Maximum wall time to run the simulator for.
  float max_time_sec = 2;
  // Maximum size of compressed tape before we give up.
  uint64 max_tape_blocks = 3;

  // Prover Params
  bool use_prover = 4;
  // Instead of logging stripped configuration at all steps in order to try and
  // prove rules, only do it when the TM is at the edge of the tape. Any rule
  // that expands the written part of the tape will (by definition) have to go
  // to the edge, so this "shouldn't" hurt much.
  bool only_log_configs_at_edge = 5;
  bool use_limited_rules = 6;
  bool use_recursive_rules = 7;
  bool use_collatz_rules = 8;
}

message HaltInfo {
  bool is_halting = 1;
}


// TM repeats infinitely in place while evaluating a macro transition.
message InfMacroRepeatInfo {
  // The macro symbol and macro state immediately preceding the repeat.
  string macro_symbol = 1;
  string macro_state = 2;
  bool macro_dir_is_right = 3;
}

// Simulator attempted to apply a chain move to the infinite block of 0s
// thus demonstrating that this TM will move infinitely in one state across
// those 0s (Chain Recurrence). It has "Spun out".
message InfChainMoveInfo {
  string macro_state = 1;
  // Is this Chain Recurrence to the right?
  bool dir_is_right = 2;
}

// Simulator proved a PA-CTR rule that has all positive exponent changes, thus
// it will apply forever.
message InfProofSystemInfo {
  // Human readable summary of the rule itself.
  string rule = 1;
}

message InfiniteInfo {
  oneof reason {
    InfMacroRepeatInfo macro_repeat = 1;
    InfChainMoveInfo   chain_move   = 2;
    InfProofSystemInfo proof_system = 3;
    // TODO: ...
  }
}


message OverLoopsInfo {
  uint64 num_loops = 1;
}

message OverTapeInfo {
  uint64 compressed_tape_size = 1;
}

message OverTimeInfo {
  float elapsed_time_sec = 1;
}

message OverStepsInMacroInfo {
  // The macro symbol and macro state which took to long to simulate.
  string macro_symbol = 1;
  string macro_state = 2;
  bool macro_dir_is_right = 3;
}

message UnknownInfo {
  oneof reason {
    OverLoopsInfo over_loops = 1;
    OverTapeInfo over_tape = 2;
    OverTimeInfo over_time = 3;
    OverStepsInMacroInfo over_steps_in_macro = 4;
  }
}

message SimulatorResult {
  // Results
  oneof exit_condition {
    HaltInfo halt_info = 1;
    InfiniteInfo infinite_info = 2;

    // We could not decide if this machine halted or will never halt.
    UnknownInfo unknown_info = 3;
  }

  // Stats
  uint64 elapsed_time_us = 5;

  // Number of simulator steps (or loops). One simulator step is either a
  // basic Macro Machine step, a Chain Step or a Rule Step.
  uint64 num_loops = 6;
  uint64 num_macro_moves = 7;
  uint64 num_chain_moves = 10;
  uint64 num_rule_moves = 11;

  // Number of base TM steps that this TM was simulated up to. We don't need
  // to know the precise num_steps, just want ballpark (order of magnitude).
  uint64 log10_num_steps = 4;

  uint64 num_rules_proven = 8;
  uint64 num_meta_diff_rules_proven = 12;
  uint64 num_gen_rules_proven = 13;
  uint64 num_proofs_failed = 9;

  // next id: 14
}

message SimulatorInfo {
  SimulatorParams parameters = 1;
  SimulatorResult result = 2;
}


message BlockFinderParams {
  // # loops to run Sim searching for least-compressed tape.
  uint64 compression_search_loops = 1;
  // # loops to run sim for each multiple of optimal compression size.
  uint64 mult_sim_loops = 2;
  // While searching for optimal multiple: How far should we look beyond
  // current best mult?
  uint64 max_block_mult = 3;
  uint64 max_block_size = 4;
  // If non-zero, fixed block mult.
  uint64 block_mult = 5;
}

message BlockFinderResult {
  // Results
  // Overall heuristically decided best block size.
  uint64 best_block_size = 1;

  // Stats
  uint64 elapsed_time_us = 2;

  // Chain Sim loop (with block size 1) where compressed tape was largest
  // (least effectively compressed).
  uint64 least_compressed_loop = 3;
  // # Blocks (with compression) on this least compressed tape.
  uint64 least_compressed_tape_size_chain = 4;
  // Total # symbols (no compression) on this least compressed tape.
  uint64 least_compressed_tape_size_raw = 5;
  // Best block size for compression on this least compressed tape.
  uint64 best_compression_block_size = 6;
  // # Blocks (with compression) using best_compression_block_size on this
  // least compressed tape.
  uint64 best_compression_tape_size = 7;

  // Best multiple of best_compression_block_size found.
  uint64 best_mult = 8;
  // "Chain factor" (steps_from_chain / steps_from_macro) at best_mult.
  float best_chain_factor = 9;
}

message BlockFinderInfo {
  BlockFinderParams parameters = 1;
  BlockFinderResult result = 2;
}


message FilterInfo {
  bool tested = 1;
  bool success = 2;

  // Stats
  uint64 elapsed_time_us = 3;
}


message LinRecurFilterParams {
  // Parameters
  uint64 max_steps = 1;
  // Is start_step the min start time of LR?
  // Or just a time at which it had started by?
  bool find_min_start_step = 2;
}

message LinRecurFilterResult {
  // Results
  // Did the filter classify this machine as LR?
  bool success = 1;
  // A step at which the machine is in Lin Recurrence.
  // If is_start_step_min=True, this is the smallest such step (i.e. the
  // step that Lin Recurrence began).
  uint64 start_step = 2;
  // Period of LR cycle.
  uint64 period = 3;
  // Tape offset distance from one cycle to the next
  // (+ means right, - means left, 0 means it repeats in place).
  sint64 offset = 4;

  // Stats
  uint64 elapsed_time_us = 5;
}

message LinRecurFilterInfo {
  LinRecurFilterParams parameters = 1;
  LinRecurFilterResult result = 2;
}

message CTLParams {
  // Parameters
  uint64 block_size = 1;
  uint64 offset = 2;
  uint64 cutoff = 3;
}

message CTLResult {
  // Results
  bool success = 1;

  // Stats
  uint64 num_iters = 3;

  uint64 elapsed_time_us = 2;
}

message CTLInfo {
  CTLParams parameters = 1;
  CTLResult result = 2;
}

message CTLFilterInfo {
  // CTL1: CTL_A*
  CTLInfo ctl_as = 5;
  // CTL2: CTL_A*_B
  CTLInfo ctl_as_b = 6;
  // CTL3: CTL_A_B*
  CTLInfo ctl_a_bs = 7;
  // CTL4: CTL_A*_B_C
  CTLInfo ctl_as_b_c = 8;

  // Previously used tags: 1-4
}

message BacktrackFilterParams {
  // Maximum depth of BFS search tree to try before giving up.
  uint64 num_steps = 1;
  // Maximum width of BFS search tree to try before giving up.
  uint64 max_width = 2;
}

message BacktrackFilterResult {
  bool success = 1;

  // Maximum depth of BFS search tree reached.
  uint64 max_steps = 3;
  // Maximum width of BFS search tree reached.
  uint64 max_width = 4;
  // Number of nodes in BFS search tree.
  uint64 num_nodes = 5;

  // Stats
  uint64 elapsed_time_us = 2;
}

message BacktrackFilterInfo {
  BacktrackFilterParams parameters = 1;
  BacktrackFilterResult result = 2;
}

message ClosedGraphFilterParams {
  // Parameters
  uint64 min_block_size = 1;
  uint64 max_block_size = 2;
  bool search_all_windows = 3;
  uint64 max_steps = 4;
  uint64 max_iters = 5;
  uint64 max_configs = 6;
  uint64 max_edges = 7;
}

message ClosedGraphFilterResult {
  // Results
  bool success = 1;

  // Which parameters worked?
  uint64 block_size = 3;
  uint64 window_size = 4;
  // TODO: Implement with offset?

  // Stats
  uint64 num_steps = 5;
  uint64 num_configs = 6;
  uint64 num_edges = 7;
  uint64 num_iters = 8;
  bool found_inf_loop = 9;

  uint64 elapsed_time_us = 2;
}

message ClosedGraphFilterInfo {
  ClosedGraphFilterParams parameters = 1;
  ClosedGraphFilterResult result = 2;
}


message FilterResults {
  // parameters, results and stats from various filters.
  SimulatorInfo simulator = 1;
  BlockFinderInfo block_finder = 2;

  FilterInfo reverse_engineer = 3;
  LinRecurFilterInfo lin_recur = 4;
  CTLFilterInfo ctl = 5;
  BacktrackFilterInfo backtrack = 6;
  ClosedGraphFilterInfo closed_graph = 7;

  // TODO: Add results for other filters
}

// The top level message for a TM. It contains:
//  * TM specification (ttable)
//  * Results for all simulations and filters that have been run
//  * Concluded "Statuses" for Halting, etc. conditions
message TMRecord {
  // Version of the specification this Protobuf was written for.
  // Version only needs to change in case non-backwards/forwards compatible
  // changes are made to the specification (changing message hierarchy or
  // tag numbers).
  uint64 spec_version = 1;

  TuringMachine tm = 2;

  // Status of this machine with respect to BB, BBB, etc. criteria.
  BBStatus status = 3;

  // Detailed results and stats for all filters run.
  FilterResults filter = 4;

  // Total time spent on this TM (across all filters).
  // TODO: For now it will be reset each time we run a filter, change this to
  // add each time.
  uint64 elapsed_time_us = 5;
}
